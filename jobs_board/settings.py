"""
Django settings for jobs_board project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# import os
from datetime import timedelta
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    # set default values and types for variables
    DEBUG=(bool, False)
)
environ.Env.read_env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")


ALLOWED_HOSTS = ["*"]

# CSRF trusted origins for ngrok and other development servers
CSRF_TRUSTED_ORIGINS = [
    "https://alx-project-nexus-s0je.onrender.com",
    "https://alx-projectnexus-auktnw-ad7b69-49-12-198-51.traefik.me",
    "https://jobs-board-alx.riobaian.space",
    "http://localhost:8000",
    "https://*.ngrok-free.app",
    "https://*.ngrok.io",
]

CORS_ALLOWED_ORIGINS = [
    "https://alx-project-nexus-s0je.onrender.com",
    "https://alx-projectnexus-auktnw-ad7b69-49-12-198-51.traefik.me",
    "https://jobs-board-alx.riobaian.space",
    "http://localhost:8000",
    "https://*.ngrok-free.app",
    "https://*.ngrok.io",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "config",
    "drf_spectacular",
    "whitenoise.runserver_nostatic",
    "storages",
    "django_filters",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "jobs_board.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "jobs_board.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {"default": env.db("DATABASE_URL")}

# Add connection pooling options for production external database
if not DEBUG:
    DATABASES["default"]["CONN_MAX_AGE"] = 60  # 60 seconds connection persistence
    DATABASES["default"]["OPTIONS"] = {
        "connect_timeout": 10,
        "sslmode": "require",  # Use SSL in production
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC_URL = "static/"
# STATIC_ROOT = BASE_DIR / "staticfiles"


# # Add drf_spectacular's static files to STATICFILES_DIRS
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
#     os.path.join(BASE_DIR, "templates"),  # If using custom templates
# ]

# # Media files
# MEDIA_URL = "/media/"
# MEDIA_ROOT = BASE_DIR / "mediafiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "config.CustomUser"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Jobs Board API",
    "DESCRIPTION": "Comprehensive API for Jobs Board and Jobs Board Admin",
    "VERSION": "0.0.1",
    "CONTACT": {
        "name": "API Support",
        "email": "support@riobaian.space.com",
    },
    "LICENSE": {
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    "SERVE_INCLUDE_SCHEMA": False,
    "SERVERS": [
        {"url": "http://127.0.0.1:8000", "description": "Local server"},
        {
            "url": "https://jobs-board-alx.riobaian.space",
            "description": "Staging server",
        },
        {"url": "https://example.com/api", "description": "Production server"},
    ],
}


SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": 'Enter JWT token in the format: "Bearer <token>"',
        }
    },
    "USE_SESSION_AUTH": False,
}


# We're using R2 cloudflare storage instead

if DEBUG:
    # Local development storage settings
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
    DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

    STATIC_URL = "static/"
    MEDIA_URL = "media/"

    STATIC_ROOT = BASE_DIR / "staticfiles"
    MEDIA_ROOT = BASE_DIR / "mediafiles"


else:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    # 1) Pull credentials & bucket from env
    R2_BUCKET = env.str("R2_BUCKET_NAME")
    R2_ENDPOINT = env.str("R2_ENDPOINT_URL").rstrip(
        "/"
    )  # e.g. https://`<ACCOUNT_ID>`.r2.cloudflarestorage.com

    # 2) Common OPTIONS for both storage backends
    R2_OPTIONS = {
        "access_key": env.str("R2_ACCESS_KEY_ID"),
        "secret_key": env.str("R2_SECRET_ACCESS_KEY"),
        "bucket_name": R2_BUCKET,
        "endpoint_url": R2_ENDPOINT,
        "region_name": "auto",
        "signature_version": "s3v4",
        "addressing_style": "path",  # `<endpoint>`/`<bucket>`/`<key>`
        "default_acl": "public-read",
    }

    # 3) Tell Django 5.1+ about your storages
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": R2_OPTIONS,
            "LOCATION": "media",  # objects under /media/
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": R2_OPTIONS,
            "LOCATION": "static",  # objects under /static/
        },
    }

    # 4) URLs your templates will use
    STATIC_URL = f"https://{R2_ENDPOINT.replace('https://','')}/{R2_BUCKET}/static/"
    MEDIA_URL = f"https://{R2_ENDPOINT.replace('https://','')}/{R2_BUCKET}/media/"
