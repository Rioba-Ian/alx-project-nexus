name: Build, Push and Deploy Jobs Board

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/jobs-board

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DOCKER_BUILDKIT=1

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          echo "Running tests..."
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up SSH
        if: github.event_name != 'pull_request'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Transfer docker-compose files
        if: github.event_name != 'pull_request'
        run: |
          scp docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.DEPLOY_HOST }}:~/docker-compose.yml
          scp Dockerfile.prod ${{ secrets.SSH_USER }}@${{ secrets.DEPLOY_HOST }}:~/Dockerfile.prod
          scp entrypoint.sh ${{ secrets.SSH_USER }}@${{ secrets.DEPLOY_HOST }}:~/entrypoint.sh
          scp .env.prod.example ${{ secrets.SSH_USER }}@${{ secrets.DEPLOY_HOST }}:~/.env
          scp -r nginx ${{ secrets.SSH_USER }}@${{ secrets.DEPLOY_HOST }}:~/

      - name: Deploy to production
        if: github.event_name != 'pull_request'
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOL'
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            docker-compose down
            docker-compose up -d
            docker system prune -af
          EOL

      - name: Send deployment notification
        if: success()
        run: |
          echo "Deployment to production completed successfully!"
          # You can add notification steps here (Slack, Discord, email, etc.)
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment completed successfully!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
